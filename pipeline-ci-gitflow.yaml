variables:
# variable de grupos de fluid
- group: Fluid  
# Grupo de variables donde se encuentran las imagenes estables a usar como base en el dockerfile
- group: docker_images  
# Ruta del repositorio donde se encuentra el dockerfile ejemplo.. '$(Build.Repository.LocalPath)/Dockerfile'
- name: dockerFilePath
  value: ''
# Nombre que tendra la imagen al momento de ser construida
- name: imageName
  value: ''
# Tag que tendra la imagen al momento de ser construida
- name: imageTag
  value: ''
# ServiceConnection que usara para descargar la imagen base de jfrog para el dockerfile, y posteriormente construir la imagen 
- name: dockerRegistryConnection
  value: 'docker_imagebase'
# Ruta donde colocara la imagen que se guardo mediante tar ejemplo..  $(Build.Repository.LocalPath)
- name: dockerSavePath
  value: ''
# Propiedad del sonarQube para indicar el directorio a analizar
- name: sonarSources
  value: 'src' 
# propiedad de sonarQube para indicar los directorios a excluir en el an치lisis
- name: sonarExclusions
  value: 'node_modules/**,**/*.bin, test/**, coverage/**, resources/**, mocks/**, src/utils/schemas/**'
# propiedad de sonarQube para indicar el directorio donde se encontrara el reporte de covertura
- name: sonarCoveragePaths 
  value: 'coverage/lcov.info'
# 1=proyecto nuevo en sonarQube y 0=para actualizar una rama nueva del proyecto existente en sonarQube
- name: sonarCreateMaster
  value: '0'  
# Nombre del service connection para tarea de sonarQube
- name: sonarQubeServiceEndpoint 
  value: 'SonarLts' 
# Nombre del proyecto en SonarQube
- name: sonarProjectName  
  value: '$(Build.Repository.Name)' 
# nombre del script de pruebas unitarias
- name: unitTestCommand
  value: 'test' 
# js= javascript y tsc= typescript
- name: appType
  value: 'tsc' 
# versi칩n que se descargar치 en el agente temporalmente, si no se agrega valor utiliza la versi칩n por defecto del agente
- name: versionNode
  value: '' 
# id de proyecto en fluid asserts
- name: idfluid
  value: $(??)
# secretKey de proyecto en fluid asserts
- name: secretfluid
  value: $(??)

resources:
  repositories:
    - repository: template
      type: git
      name: DevOps/_git/templates-yaml
      ref: 'refs/heads/feature/master' # indicamos la rama que apuntamos en el repositorios template-yaml, siempre debemos apuntar a master
trigger:
  - develop
  - release
  - master
  
name: $(date:yyyyMMdd)$(rev:.r)
stages:
- stage: develop
  variables:
  - group: Artifactory
  - name: commandBuild_dev
    value: 'build'  
  condition: |
      or(
            startsWith(variables['build.sourceBranch'], 'refs/heads/feature'),
            startsWith(variables['build.sourceBranch'], 'refs/heads/develop'),
            in(variables['System.PullRequest.TargetBranch'], 'refs/heads/develop')
          )
  jobs:
  - template: prueba_fluid_sast.yml@template
    parameters:
      idfluid: ${{variables.idfluid}}
      secretfluid: ${{variables.secretfluid}}
  - job: CI
    pool: 
      name: Docker-Agents
    workspace:
      clean: all
    steps:
    - task: replacetokens@5
      inputs:
        rootDirectory: '$(Build.Repository.LocalPath)'
        targetFiles: 'Dockerfile'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true
    - template: build_NJS_v1.yml@template #ref de template en otro repository
      parameters:
        sonarCoveragePaths: ${{variables.sonarCoveragePaths}}
        sonarExclusions: ${{variables.sonarExclusions}}
        sonarSources: ${{variables.sonarSources}}
        sonarCreateMaster: ${{variables.sonarCreateMaster}}
        sonarQubeServiceEndpoint: ${{variables.sonarQubeServiceEndpoint}}
        sonarProjectName: ${{variables.sonarProjectName}}    
        commandBuild: ${{variables.commandBuild_dev}}
        unitTestCommand: ${{variables.unitTestCommand}}
        appType: ${{variables.appType}}
        versionNode: ${{variables.versionNode}}
    - template: build_DOCKER_v1.yml@template
      parameters:
        dockerFilePath: ${{variables.dockerFilePath}}
        imageName: ${{variables.imageName}}
        imageTag: ${{variables.imageTag}}
        dockerRegistryConnection: ${{variables.dockerRegistryConnection}}
        dockerSavePath: ${{variables.dockerSavePath}}
- stage: release
  variables:
  - group: calidad
  - group: Artifactory
  - name: commandBuild_qa
    value: 'build'  
  condition: |
    or(
          startsWith(variables['build.sourceBranch'], 'refs/heads/bugfix'),
          startsWith(variables['build.sourceBranch'], 'refs/heads/release'),
          startsWith(variables['System.PullRequest.TargetBranch'], 'refs/heads/release'),
          startsWith(variables['Build.SourceBranchName'], 'release')

        )
  jobs:
  - template: prueba_fluid_sast.yml@template
    parameters:
      idfluid: ${{variables.idfluid}}
      secretfluid: ${{variables.secretfluid}}
  - job: CI
    dependsOn: Pruebas_Sast
    condition: succeeded()
    pool: 
      name: Docker-Agents
    workspace:
      clean: all
    steps:
    - task: replacetokens@5
      inputs:
        rootDirectory: '$(Build.Repository.LocalPath)'
        targetFiles: 'Dockerfile'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true
    - template: build_NJS_v1.yml@template #ref de template en otro repository
      parameters:
        sonarCoveragePaths: ${{variables.sonarCoveragePaths}}
        sonarExclusions: ${{variables.sonarExclusions}}
        sonarSources: ${{variables.sonarSources}}
        sonarCreateMaster: ${{variables.sonarCreateMaster}}
        sonarQubeServiceEndpoint: ${{variables.sonarQubeServiceEndpoint}}
        sonarProjectName: ${{variables.sonarProjectName}}        
        commandBuild: ${{variables.commandBuild_qa}}
        unitTestCommand: ${{variables.unitTestCommand}}
        appType: ${{variables.appType}}
        versionNode: ${{variables.versionNode}}
    - template: build_DOCKER_v1.yml@template
      parameters:
        dockerFilePath: ${{variables.dockerFilePath}}
        imageName: ${{variables.imageName}}
        imageTag: ${{variables.imageTag}}
        dockerRegistryConnection: ${{variables.dockerRegistryConnection}}
        dockerSavePath: ${{variables.dockerSavePath}}

  
- stage: master
  variables:
  - group: produccion
  - group: Artifactory-produccion
  - name: commandBuild_prod
    value: 'build'  
  condition: |
    or(
          startsWith(variables['build.sourceBranch'], 'refs/heads/hotfix'),
          eq(variables['build.sourceBranch'], 'refs/heads/master'),
          in(variables['System.PullRequest.TargetBranch'], 'refs/heads/master')
        )
  jobs:
  - template: prueba_fluid_sast.yml@template
    parameters:
      idfluid: ${{variables.idfluid}}
      secretfluid: ${{variables.secretfluid}}
  - job: CI
    dependsOn: Pruebas_Sast
    condition: succeeded()
    pool: 
      name: Docker-Agents
    workspace:
      clean: all
    steps:
    - task: replacetokens@5
      inputs:
        rootDirectory: '$(Build.Repository.LocalPath)'
        targetFiles: 'Dockerfile'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true
    - template: build_NJS_v1.yml@template #ref de template en otro repository
      parameters:
        sonarCoveragePaths: ${{variables.sonarCoveragePaths}}
        sonarExclusions: ${{variables.sonarExclusions}}
        sonarSources: ${{variables.sonarSources}}
        sonarCreateMaster: ${{variables.sonarCreateMaster}}
        sonarQubeServiceEndpoint: ${{variables.sonarQubeServiceEndpoint}}
        sonarProjectName: ${{variables.sonarProjectName}}         
        commandBuild: ${{variables.commandBuild_prod}}
        unitTestCommand: ${{variables.unitTestCommand}}
        appType: ${{variables.appType}}
        versionNode: ${{variables.versionNode}}
    - template: build_DOCKER_v1.yml@template
      parameters:
        dockerFilePath: ${{variables.dockerFilePath}}
        imageName: ${{variables.imageName}}
        imageTag: ${{variables.imageTag}}
        dockerRegistryConnection: ${{variables.dockerRegistryConnection}}
        dockerSavePath: ${{variables.dockerSavePath}}